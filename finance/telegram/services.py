
from django.utils import timezone
from datetime import timedelta
from django.db.models import Sum
from finance.models import TelegramLinkToken, Transaction, Category, User, MonthlyBudget


def process_start_command(token, telegram_id):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        link_token = TelegramLinkToken.objects.get(token=token)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ (5 –º–∏–Ω—É—Ç)
        if link_token.created_at < timezone.now() - timedelta(minutes=5):
            link_token.delete()
            return "‚ùå –°—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—É—é –Ω–∞ —Å–∞–π—Ç–µ."

        user = link_token.user
        user.telegram_id = telegram_id
        user.telegram_linked = True
        user.save()
        link_token.delete()

        return (
            "‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/today - –û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "/week - –û—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é\n"
            "/add - –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é\n"
            "/help - –°–ø—Ä–∞–≤–∫–∞\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:"
        )

    except TelegramLinkToken.DoesNotExist:
        return (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –≤–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/today - –û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "/week - –û—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é\n"
            "/add - –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é\n"
            "/help - –°–ø—Ä–∞–≤–∫–∞\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:"
        )
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"


def get_today_report(telegram_id):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        user = User.objects.get(telegram_id=telegram_id)
        today = timezone.now().date()

        expenses = Transaction.objects.filter(
            user=user, date=today, category__is_income=False
        ).aggregate(sum=Sum('amount'))['sum'] or 0

        income = Transaction.objects.filter(
            user=user, date=today, category__is_income=True
        ).aggregate(sum=Sum('amount'))['sum'] or 0

        return f"üìä –û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n–î–æ—Ö–æ–¥—ã: {income} ‚ÇΩ\n–†–∞—Å—Ö–æ–¥—ã: {expenses} ‚ÇΩ"

    except User.DoesNotExist:
        return "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –∏ –ø—Ä–∏–≤—è–∂–∏—Ç–µ Telegram."
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"


def get_week_report(telegram_id):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"""
    try:
        user = User.objects.get(telegram_id=telegram_id)
        week_ago = timezone.now().date() - timedelta(days=7)

        expenses = Transaction.objects.filter(
            user=user, date__gte=week_ago, category__is_income=False
        ).aggregate(sum=Sum('amount'))['sum'] or 0

        return f"üìà –†–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é: {expenses} ‚ÇΩ"

    except User.DoesNotExist:
        return "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω."
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"


def process_add_command(telegram_id, amount, category_name, description):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    try:
        user = User.objects.get(telegram_id=telegram_id)

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        normalized_input = category_name.strip().lower()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_categories = Category.objects.filter(user=user)

        # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
        category = None
        for cat in user_categories:
            if cat.name.lower() == normalized_input:
                category = cat
                break

        if not category:
            # –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: –ø–æ–∫–∞–∂–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            available_categories = ", ".join([c.name for c in user_categories])
            return (
                f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {available_categories}"
            )

        Transaction.objects.create(
            user=user,
            amount=amount,
            category=category,
            description=description
        )

        return f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: {amount} ‚ÇΩ ({category.name})"

    except User.DoesNotExist:
        return "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω."
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"


def prepare_daily_reports():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤"""
    reports = []
    try:
        users = User.objects.filter(telegram_linked=True, send_daily_report=True)
        today = timezone.now().date()

        for user in users:
            expenses = Transaction.objects.filter(
                user=user, date=today, category__is_income=False
            ).aggregate(sum=Sum('amount'))['sum'] or 0

            reports.append((
                user.telegram_id,
                f"üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç:\n–°–µ–≥–æ–¥–Ω—è –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {expenses} ‚ÇΩ"
            ))
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—Ç—á—ë—Ç–æ–≤: {e}")

    return reports


def create_category(telegram_id, name, is_income):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    try:
        user = User.objects.get(telegram_id=telegram_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if Category.objects.filter(user=user, name__iexact=name).exists():
            return f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        Category.objects.create(
            user=user,
            name=name,
            is_income=is_income
        )

        return f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"

    except User.DoesNotExist:
        return "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω."
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"


def set_monthly_budget(telegram_id, planned_income, planned_expense):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±—é–¥–∂–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"""
    try:
        user = User.objects.get(telegram_id=telegram_id)
        current_month = timezone.now().replace(day=1).strftime('%Y-%m')

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±—é–¥–∂–µ—Ç
        budget, created = MonthlyBudget.objects.update_or_create(
            user=user,
            month=current_month,
            defaults={
                'planned_income': planned_income,
                'planned_expense': planned_expense
            }
        )

        return (
            f"‚úÖ –ë—é–¥–∂–µ—Ç –Ω–∞ {current_month} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:\n"
            f"–î–æ—Ö–æ–¥: {planned_income} ‚ÇΩ\n"
            f"–†–∞—Å—Ö–æ–¥: {planned_expense} ‚ÇΩ"
        )

    except User.DoesNotExist:
        return "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω."
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"


def get_budget_recommendations(telegram_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±—é–¥–∂–µ—Ç–∞"""
    try:
        user = User.objects.get(telegram_id=telegram_id)
        current_month = timezone.now().replace(day=1).strftime('%Y-%m')

        try:
            budget = MonthlyBudget.objects.get(user=user, month=current_month)
        except MonthlyBudget.DoesNotExist:
            return ["üìä –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±—é–¥–∂–µ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."]

        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–∞–∫ –≤ home view
        year, month = map(int, current_month.split('-'))
        transactions = Transaction.objects.filter(
            user=user,
            date__year=year,
            date__month=month
        )

        total_income = transactions.filter(category__is_income=True).aggregate(sum=Sum('amount'))['sum'] or 0
        total_expense = transactions.filter(category__is_income=False).aggregate(sum=Sum('amount'))['sum'] or 0

        recommendations = []

        # –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–æ–≤
        if budget.planned_income > 0:
            income_diff = total_income - budget.planned_income
            income_percent = (total_income / budget.planned_income * 100) if budget.planned_income else 0

            if income_diff > 0:
                recommendations.append(
                    f"‚úÖ –î–æ—Ö–æ–¥—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ø–ª–∞–Ω –Ω–∞ {abs(income_diff):.2f} ‚ÇΩ ({income_percent:.1f}%)"
                )
            elif income_diff < 0:
                recommendations.append(
                    f"‚ö†Ô∏è –î–æ—Ö–æ–¥—ã –Ω–∏–∂–µ –ø–ª–∞–Ω–∞ –Ω–∞ {abs(income_diff):.2f} ‚ÇΩ ({income_percent:.1f}%)"
                )

        # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤
        if budget.planned_expense > 0:
            expense_diff = total_expense - budget.planned_expense
            expense_percent = (total_expense / budget.planned_expense * 100) if budget.planned_expense else 0

            if expense_diff > 0:
                recommendations.append(
                    f"‚ö†Ô∏è –†–∞—Å—Ö–æ–¥—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ø–ª–∞–Ω –Ω–∞ {abs(expense_diff):.2f} ‚ÇΩ ({expense_percent:.1f}%)"
                )
            elif expense_diff < 0:
                recommendations.append(
                    f"‚úÖ –†–∞—Å—Ö–æ–¥—ã –Ω–∏–∂–µ –ø–ª–∞–Ω–∞ –Ω–∞ {abs(expense_diff):.2f} ‚ÇΩ ({expense_percent:.1f}%)"
                )

        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞
        today = timezone.now().date()
        days_passed = (today - today.replace(day=1)).days + 1
        if days_passed > 0 and budget.planned_expense > 0:
            daily_expense = total_expense / days_passed
            days_in_month = (today.replace(month=today.month % 12 + 1) - timedelta(days=1)).day
            days_remaining = days_in_month - days_passed
            projected_expense = total_expense + (daily_expense * days_remaining)

            if projected_expense > budget.planned_expense:
                over = projected_expense - budget.planned_expense
                recommendations.append(
                    f"‚ö†Ô∏è –ü–æ —Ç–µ–∫—É—â–∏–º —Ç—Ä–∞—Ç–∞–º –≤—ã –ø—Ä–µ–≤—ã—Å–∏—Ç–µ –±—é–¥–∂–µ—Ç –Ω–∞ {over:.2f} ‚ÇΩ"
                )
            else:
                remaining = budget.planned_expense - projected_expense
                recommendations.append(
                    f"‚úÖ –ü–æ —Ç–µ–∫—É—â–∏–º —Ç—Ä–∞—Ç–∞–º –≤—ã —É–ª–æ–∂–∏—Ç–µ—Å—å –≤ –±—é–¥–∂–µ—Ç, –æ—Å—Ç–∞—Ç–æ–∫ {remaining:.2f} ‚ÇΩ"
                )

        return recommendations

    except User.DoesNotExist:
        return ["‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω."]
    except Exception as e:
        return [f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"]


def get_detailed_today_report(telegram_id):
    """–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        user = User.objects.get(telegram_id=telegram_id)
        today = timezone.now().date()

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        expenses_by_category = {}
        transactions = Transaction.objects.filter(
            user=user,
            date=today,
            category__is_income=False
        )

        for t in transactions:
            cat_name = t.category.name
            if cat_name not in expenses_by_category:
                expenses_by_category[cat_name] = 0
            expenses_by_category[cat_name] += t.amount

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
        report = f"üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({today}):\n"
        if expenses_by_category:
            for category, amount in expenses_by_category.items():
                report += f"‚Ä¢ {category}: {amount} ‚ÇΩ\n"
        else:
            report += "–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\n"

        return report

    except User.DoesNotExist:
        return "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω."
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"


def compare_with_previous_week(telegram_id):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ–π"""
    try:
        user = User.objects.get(telegram_id=telegram_id)
        today = timezone.now().date()

        # –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è
        week_ago = today - timedelta(days=7)
        current_week_expenses = Transaction.objects.filter(
            user=user,
            date__gte=week_ago,
            category__is_income=False
        ).aggregate(sum=Sum('amount'))['sum'] or 0

        # –ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è
        two_weeks_ago = today - timedelta(days=14)
        previous_week_expenses = Transaction.objects.filter(
            user=user,
            date__gte=two_weeks_ago,
            date__lt=week_ago,
            category__is_income=False
        ).aggregate(sum=Sum('amount'))['sum'] or 0

        diff = current_week_expenses - previous_week_expenses

        report = f"üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ–π:\n"
        report += f"–≠—Ç–∞ –Ω–µ–¥–µ–ª—è: {current_week_expenses} ‚ÇΩ\n"
        report += f"–ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è: {previous_week_expenses} ‚ÇΩ\n"

        if diff > 0:
            report += f"–í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ {diff:.2f} ‚ÇΩ –±–æ–ª—å—à–µ. üí∏"
        elif diff < 0:
            report += f"–í—ã —Å—ç–∫–æ–Ω–æ–º–∏–ª–∏ {abs(diff):.2f} ‚ÇΩ! üéâ"
        else:
            report += "–†–∞—Å—Ö–æ–¥—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã. üü∞"

        return report

    except User.DoesNotExist:
        return "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω."
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"


def get_detailed_week_report(telegram_id):
    """–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é"""
    try:
        user = User.objects.get(telegram_id=telegram_id)
        week_ago = timezone.now().date() - timedelta(days=7)

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        expenses_by_category = {}
        transactions = Transaction.objects.filter(
            user=user,
            date__gte=week_ago,
            category__is_income=False
        )

        for t in transactions:
            cat_name = t.category.name
            if cat_name not in expenses_by_category:
                expenses_by_category[cat_name] = 0
            expenses_by_category[cat_name] += t.amount

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
        report = f"üìà –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é:\n"
        if expenses_by_category:
            for category, amount in expenses_by_category.items():
                report += f"‚Ä¢ {category}: {amount} ‚ÇΩ\n"
        else:
            report += "–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é.\n"

        return report

    except User.DoesNotExist:
        return "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω."
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"


def compare_with_previous_month(telegram_id):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ—à–ª—ã–º –º–µ—Å—è—Ü–µ–º"""
    try:
        user = User.objects.get(telegram_id=telegram_id)
        today = timezone.now().date()
        current_month_str = today.replace(day=1).strftime('%Y-%m')

        # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        current_year, current_month = map(int, current_month_str.split('-'))
        current_month_expenses = Transaction.objects.filter(
            user=user,
            date__year=current_year,
            date__month=current_month,
            category__is_income=False
        ).aggregate(sum=Sum('amount'))['sum'] or 0

        # –ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü
        if current_month == 1:
            previous_year, previous_month = current_year - 1, 12
        else:
            previous_year, previous_month = current_year, current_month - 1

        previous_month_expenses = Transaction.objects.filter(
            user=user,
            date__year=previous_year,
            date__month=previous_month,
            category__is_income=False
        ).aggregate(sum=Sum('amount'))['sum'] or 0

        diff = current_month_expenses - previous_month_expenses

        report = f"üìÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ—à–ª—ã–º –º–µ—Å—è—Ü–µ–º:\n"
        report += f"–≠—Ç–æ—Ç –º–µ—Å—è—Ü: {current_month_expenses} ‚ÇΩ\n"
        report += f"–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü: {previous_month_expenses} ‚ÇΩ\n"

        if diff > 0:
            report += f"–í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ {diff:.2f} ‚ÇΩ –±–æ–ª—å—à–µ. üí∏"
        elif diff < 0:
            report += f"–í—ã —Å—ç–∫–æ–Ω–æ–º–∏–ª–∏ {abs(diff):.2f} ‚ÇΩ! üéâ"
        else:
            report += "–†–∞—Å—Ö–æ–¥—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã. üü∞"

        return report

    except User.DoesNotExist:
        return "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω."
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"