from aiogram import Router, types
from aiogram.filters import Command
from asgiref.sync import sync_to_async
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from finance.telegram.keyboards import get_main_menu, get_remove_keyboard
from finance.telegram.services import (
    process_start_command,
    get_today_report,
    get_week_report,
    process_add_command,
    prepare_daily_reports,
    create_category,
    get_detailed_today_report,
    compare_with_previous_week,
    get_detailed_week_report,
    compare_with_previous_month,
    set_monthly_budget,
    get_budget_recommendations,
    User  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç User
)

router = Router()


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    args = message.text.split(" ")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è telegram_id
    try:
        user = await sync_to_async(User.objects.get)(telegram_id=message.from_user.id)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω
        if user.telegram_linked:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await message.answer(
                f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.username}!\n\n"
                "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                reply_markup=get_main_menu()
            )
            return
    except User.DoesNotExist:
        pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏–≤—è–∑–∫–∏
    if len(args) > 1:
        token = args[1]
        try:
            result = await sync_to_async(process_start_command)(token, message.from_user.id)
            await message.answer(result, reply_markup=get_main_menu())
            return
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_main_menu())
            return

    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π /start –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
    result = await sync_to_async(process_start_command)(None, message.from_user.id)
    await message.answer(result, reply_markup=get_main_menu())


@router.message(Command("today"))
async def cmd_today(message: types.Message):
    result = await sync_to_async(get_today_report)(message.from_user.id)

    # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="report_detailed")],
        [InlineKeyboardButton(text="üîÑ –°—Ä–∞–≤–Ω–∏—Ç—å —Å –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ–π", callback_data="report_compare_week")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É", callback_data="add_expense")]
    ])

    await message.answer(result, reply_markup=keyboard)


@router.message(Command("week"))
async def cmd_week(message: types.Message):
    result = await sync_to_async(get_week_report)(message.from_user.id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="report_detailed")],
        [InlineKeyboardButton(text="üîÑ –°—Ä–∞–≤–Ω–∏—Ç—å —Å –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ–π", callback_data="report_compare_week")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É", callback_data="add_expense")]
    ])

    await message.answer(result, reply_markup=keyboard)


@router.message(Command("add"))
async def cmd_add(message: types.Message):
    parts = message.text.split(" ", 2)
    if len(parts) < 3:
        await message.answer(
            "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/add —Å—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è [–æ–ø–∏—Å–∞–Ω–∏–µ]\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "/add 500 –ï–¥–∞ –æ–±–µ–¥",
            reply_markup=get_main_menu()
        )
        return

    try:
        amount = float(parts[1])
        category_name = parts[2].split(" ")[0]
        description = " ".join(parts[2].split(" ")[1:]) if len(parts[2].split(" ")) > 1 else ""

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å—é –ª–æ–≥–∏–∫—É –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        result = await sync_to_async(process_add_command)(
            message.from_user.id, amount, category_name, description
        )
        await message.answer(result, reply_markup=get_main_menu())
    except ValueError:
        await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.", reply_markup=get_main_menu())
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_main_menu())


@router.message(Command("menu"))
async def cmd_menu(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    await message.answer(
        "–ú–µ–Ω—é –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:",
        reply_markup=get_main_menu()
    )


@router.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "üìå /today - –û—Ç—á—ë—Ç –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "üìå /week - –û—Ç—á—ë—Ç –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "üìå /add —Å—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è [–æ–ø–∏—Å–∞–Ω–∏–µ] - –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é\n"
        "    –ü—Ä–∏–º–µ—Ä: /add 500 –ï–¥–∞ –æ–±–µ–¥\n"
        "üìå /menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "üí° –°–æ–≤–µ—Ç: –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º."
    )
    await message.answer(help_text, reply_markup=get_main_menu())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
@router.message(lambda message: message.text == "/today")
async def button_today(message: types.Message):
    result = await sync_to_async(get_today_report)(message.from_user.id)
    await message.answer(result, reply_markup=get_main_menu())


@router.message(lambda message: message.text == "/week")
async def button_week(message: types.Message):
    result = await sync_to_async(get_week_report)(message.from_user.id)
    await message.answer(result, reply_markup=get_main_menu())


@router.message(lambda message: message.text == "/add")
async def button_add(message: types.Message):
    await message.answer(
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "/add —Å—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è [–æ–ø–∏—Å–∞–Ω–∏–µ]\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "/add 500 –ï–¥–∞ –æ–±–µ–¥",
        reply_markup=get_main_menu()
    )


@router.message(lambda message: message.text == "/help")
async def button_help(message: types.Message):
    help_text = (
        "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "üìå /today - –û—Ç—á—ë—Ç –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "üìå /week - –û—Ç—á—ë—Ç –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "üìå /add —Å—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è [–æ–ø–∏—Å–∞–Ω–∏–µ] - –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é\n"
        "    –ü—Ä–∏–º–µ—Ä: /add 500 –ï–¥–∞ –æ–±–µ–¥\n"
        "üìå /menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "üí° –°–æ–≤–µ—Ç: –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º."
    )
    await message.answer(help_text, reply_markup=get_main_menu())


@router.message(lambda message: message.text == "–°–∫—Ä—ã—Ç—å –º–µ–Ω—é")
async def hide_menu(message: types.Message):
    await message.answer(
        "–ú–µ–Ω—é —Å–∫—Ä—ã—Ç–æ. –ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /menu",
        reply_markup=get_remove_keyboard()
    )


@router.message(Command("newcategory"))
async def cmd_newcategory(message: types.Message):
    help_text = (
        "üìù –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "/createcategory –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø\n\n"
        "–¢–∏–ø –º–æ–∂–µ—Ç –±—ã—Ç—å:\n"
        "income - –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤\n"
        "expense - –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "/createcategory –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç expense"
    )
    await message.answer(help_text, reply_markup=get_main_menu())


@router.message(Command("createcategory"))
async def cmd_createcategory(message: types.Message):
    parts = message.text.split(" ", 2)
    if len(parts) < 3:
        await message.answer(
            "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /createcategory –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø\n"
            "–¢–∏–ø: income –∏–ª–∏ expense",
            reply_markup=get_main_menu()
        )
        return

    try:
        name = parts[1]
        type_str = parts[2].lower()

        if type_str not in ['income', 'expense']:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: income –∏–ª–∏ expense",
                reply_markup=get_main_menu()
            )
            return

        is_income = (type_str == 'income')

        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        result = await sync_to_async(create_category)(
            message.from_user.id, name, is_income
        )

        await message.answer(result, reply_markup=get_main_menu())

    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_main_menu()
        )


@router.message(Command("setbudget"))
async def cmd_setbudget(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±—é–¥–∂–µ—Ç–∞"""
    help_text = (
        "üìù –ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "/budget [–¥–æ—Ö–æ–¥] [—Ä–∞—Å—Ö–æ–¥]\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "/budget 50000 35000"
    )
    await message.answer(help_text, reply_markup=get_main_menu())


@router.message(Command("budget"))
async def cmd_setbudget_values(message: types.Message):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞"""
    parts = message.text.split()
    if len(parts) != 3:
        await message.answer(
            "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /budget [–¥–æ—Ö–æ–¥] [—Ä–∞—Å—Ö–æ–¥]\n"
            "–ü—Ä–∏–º–µ—Ä: /budget 50000 35000",
            reply_markup=get_main_menu()
        )
        return

    try:
        planned_income = float(parts[1])
        planned_expense = float(parts[2])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—é–¥–∂–µ—Ç
        result = await sync_to_async(set_monthly_budget)(
            message.from_user.id, planned_income, planned_expense
        )

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = await sync_to_async(get_budget_recommendations)(message.from_user.id)

        response = f"{result}\n\nüìä –ê–Ω–∞–ª–∏–∑ –±—é–¥–∂–µ—Ç–∞:\n"
        response += "\n".join(recommendations)

        await message.answer(response, reply_markup=get_main_menu())
    except ValueError:
        await message.answer(
            "‚ùå –î–æ—Ö–æ–¥ –∏ —Ä–∞—Å—Ö–æ–¥ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏",
            reply_markup=get_main_menu()
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@router.callback_query(lambda c: c.data == "report_detailed")
async def callback_detailed_report(callback: CallbackQuery):
    result = await sync_to_async(get_detailed_today_report)(callback.from_user.id)
    await callback.message.edit_text(result)
    await callback.answer()


@router.callback_query(lambda c: c.data == "report_compare_week")
async def callback_compare_week(callback: CallbackQuery):
    result = await sync_to_async(compare_with_previous_week)(callback.from_user.id)
    await callback.message.edit_text(result)
    await callback.answer()


@router.callback_query(lambda c: c.data == "add_expense")
async def callback_add_expense(callback: CallbackQuery):
    await callback.message.answer(
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "/add —Å—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è [–æ–ø–∏—Å–∞–Ω–∏–µ]\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "/add 500 –ï–¥–∞ –æ–±–µ–¥"
    )
    await callback.answer()


@router.callback_query(lambda c: c.data == "report_detailed_week")
async def callback_detailed_week_report(callback: CallbackQuery):
    result = await sync_to_async(get_detailed_week_report)(callback.from_user.id)
    await callback.message.edit_text(result)
    await callback.answer()


@router.callback_query(lambda c: c.data == "report_compare_month")
async def callback_compare_month(callback: CallbackQuery):
    result = await sync_to_async(compare_with_previous_month)(callback.from_user.id)
    await callback.message.edit_text(result)
    await callback.answer()